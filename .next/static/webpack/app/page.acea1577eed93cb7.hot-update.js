"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/services/api.ts":
/*!*****************************!*\
  !*** ./app/services/api.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExternalSystemAPI: () => (/* binding */ ExternalSystemAPI),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   validateBearerToken: () => (/* binding */ validateBearerToken)\n/* harmony export */ });\nconst API_BASE_URL = \"http://uzui-alb-1991166989.us-east-2.elb.amazonaws.com\" || 0;\nclass ExternalSystemAPI {\n    async updateCurrentPatient(patient) {\n        try {\n            const payload = {\n                name: patient.name,\n                idCountry: patient.idCountry.toUpperCase(),\n                idType: patient.idType,\n                idValue: patient.idValue\n            };\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/account/external-system/current-patient\"), {\n                method: 'PATCH',\n                headers: {\n                    'Authorization': \"Bearer \".concat(this.bearerToken),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                return {\n                    success: false,\n                    error: \"Failed to update patient: \".concat(response.status, \" \").concat(response.statusText, \". \").concat(errorText)\n                };\n            }\n            // Check if response is 200 and contains success: true\n            const data = await response.json().catch(()=>({\n                    success: false\n                }));\n            if (response.status === 200 && data.success === true) {\n                return {\n                    success: true,\n                    data\n                };\n            } else {\n                return {\n                    success: false,\n                    error: 'API returned unexpected response format or success: false'\n                };\n            }\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        }\n    }\n    async findSessionsByPatient(patient) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n        try {\n            const payload = {\n                idCountry: patient.idCountry.toUpperCase(),\n                idType: patient.idType,\n                idValue: patient.idValue,\n                limit\n            };\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/scribe-sessions/find-by-patient\"), {\n                method: 'POST',\n                headers: {\n                    'Authorization': \"Bearer \".concat(this.bearerToken),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                return {\n                    success: false,\n                    error: \"Failed to fetch sessions: \".concat(response.status, \" \").concat(response.statusText, \". \").concat(errorText)\n                };\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        }\n    }\n    async fetchScribeSession(patient) {\n        try {\n            // First, find sessions for the patient\n            const sessionsResult = await this.findSessionsByPatient(patient, 1);\n            if (!sessionsResult.success || !sessionsResult.data) {\n                return {\n                    success: false,\n                    error: sessionsResult.error || 'Failed to fetch patient sessions'\n                };\n            }\n            const { sessions } = sessionsResult.data;\n            if (!sessions || sessions.length === 0) {\n                return {\n                    success: false,\n                    error: \"No sessions found for patient \".concat(patient.name, \" (ID: \").concat(patient.idValue, \")\")\n                };\n            }\n            // Get the most recent session\n            const latestSession = sessions[0];\n            // Format the medical record data as a scribe note\n            const scribeNote = this.formatSessionAsScribeNote(latestSession);\n            return {\n                success: true,\n                data: scribeNote\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        }\n    }\n    formatSessionAsScribeNote(session) {\n        let scribeNote = \"Session ID: \".concat(session.documentId, \"\\n\");\n        scribeNote += \"Date: \".concat(new Date(session.createdAt).toLocaleString(), \"\\n\");\n        scribeNote += \"Status: \".concat(session.status, \"\\n\\n\");\n        if (session.medicalRecord) {\n            scribeNote += \"Medical Record:\\n\";\n            scribeNote += \"================\\n\\n\";\n            if (session.medicalRecord.extraOralExamination) {\n                scribeNote += \"Extra Oral Examination:\\n\";\n                scribeNote += JSON.stringify(session.medicalRecord.extraOralExamination, null, 2);\n                scribeNote += \"\\n\\n\";\n            }\n            if (session.medicalRecord.intraOralExamination) {\n                scribeNote += \"Intra Oral Examination:\\n\";\n                scribeNote += JSON.stringify(session.medicalRecord.intraOralExamination, null, 2);\n                scribeNote += \"\\n\\n\";\n            }\n            if (session.medicalRecord.odontogram) {\n                scribeNote += \"Odontogram:\\n\";\n                scribeNote += JSON.stringify(session.medicalRecord.odontogram, null, 2);\n                scribeNote += \"\\n\\n\";\n            }\n        } else {\n            scribeNote += \"No medical record available for this session.\\n\";\n        }\n        return scribeNote;\n    }\n    constructor(bearerToken){\n        this.bearerToken = bearerToken;\n    }\n}\n// Static method for validating bearer token\nasync function validateBearerToken(token) {\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/validate\"), {\n            method: 'GET',\n            headers: {\n                'Authorization': \"Bearer \".concat(token)\n            }\n        });\n        if (!response.ok) {\n            return {\n                success: false,\n                error: \"Invalid token: \".concat(response.status, \" \").concat(response.statusText)\n            };\n        }\n        const data = await response.json().catch(()=>null);\n        return {\n            success: true,\n            data\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to validate token'\n        };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ExternalSystemAPI);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/api.ts\n"));

/***/ })

});